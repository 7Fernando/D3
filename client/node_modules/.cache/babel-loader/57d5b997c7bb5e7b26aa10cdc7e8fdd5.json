{"ast":null,"code":"//import { fetchDogs } from \"../actions/actions\";\nconst initialState = {\n  dogs: [],\n  temperaments: [],\n  origin: []\n};\n\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"fetchDogs\":\n      return { ...state,\n        dogs: action.payload,\n        origin: action.payload\n      };\n\n    case \"createDog\":\n      return { ...state,\n        //copio lo que ya tengo en el array le concateno el nuevo obj\n        dogs: state.dogs.concat(action.payload) //[{},{}] --> [{},{},{}]\n\n      };\n\n    case \"getTemperaments\":\n      return { ...state,\n        temperaments: action.payload\n      };\n\n    case \"orderByName\":\n      const sortArr = action.payload === \"asc\" ? [...state.origin].sort((a, b) => {\n        if (a.name < b.name) return -1;\n        if (a.name > b.name) return 1;\n        return 0;\n      }) : [...state.origin].sort((a, b) => {\n        if (a.name > b.name) return -1;\n        if (a.name < b.name) return 1;\n        return 0;\n      });\n      return { ...state,\n        dogs: sortArr\n      };\n\n    case \"orderByWeight\":\n      const sortArr2 = action.payload === \"wmin\" ? [...state.origin].sort((a, b) => {\n        if (a.weight_min < b.weight_min) return -1;\n        if (a.weight_min > b.weight_min) return 1;\n        return 0;\n      }) : [...state.origin].sort((a, b) => {\n        if (a.weight_max > b.weight_max) return -1;\n        if (a.weight_max < b.weight_max) return 1;\n        return 0;\n      });\n      return { ...state,\n        dogs: sortArr2\n      };\n\n    case \"orderByOrigin\":\n      let originFilter = state.origin;\n      const createdDogs = action.payload === \"Dogs_from_DB\" ? originFilter.filter(e => e.createInDb) : originFilter.filter(e => !e.createInDb); //console.log('yuyu',createdDogs)\n\n      return { ...state,\n        dogs: createdDogs\n      };\n\n    case \"filterByTemperament\":\n      let temperamentFilter = state.origin; // const t = temperamentFilter.filter((e) =>\n      //   e.temperament !== null ? e.temperament.includes(action.payload) : \"\"\n      // );\n\n      let arry = [];\n      const t = temperamentFilter.filter(dog => {\n        // if(dog.temperament){ // info viene como [{name:..},{name:..},{name:..}]\n        //     const temperament = dog.temperament.map( dog => dog)\n        //     return temperament.includes(action.payload)}\n        if (dog.temperament) {\n          //info viene como string\n          if (dog.temperament.includes(action.payload)) {\n            [...arry];\n            arry.push(dog);\n            return dog.temperament.includes(action.payload);\n          }\n        }\n      }); //console.log('yuyu',t)\n\n      console.log(arry);\n      return { ...state,\n        dogs: arry\n      };\n\n    /* const allDoguies = state.dogs\r\n                const t = temperamentFilter.filter(dog => {\r\n                    if(dog.temperament){ // info viene como [{name:..},{name:..},{name:..}]\r\n                        const temperament = dog.temperaments.map( dog => dog)\r\n                        return temperament.includes(action.payload)}\r\n                    if (dog.temperament) { //info viene como string\r\n                        return dog.temperament.includes(action.payload)\r\n                    }\r\n                    return null\r\n                })\r\n    \r\n                return {\r\n                    ...state,\r\n                    dogs: action.payload === 'sinFiltro' ? allDoguies : tempDogs,\r\n    \r\n                } */\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/Fer/Desktop/PI/PI-Dogs-main/client/src/redux/reducer/rootReducer.jsx"],"names":["initialState","dogs","temperaments","origin","rootReducer","state","action","type","payload","concat","sortArr","sort","a","b","name","sortArr2","weight_min","weight_max","originFilter","createdDogs","filter","e","createInDb","temperamentFilter","arry","t","dog","temperament","includes","push","console","log"],"mappings":"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","sourcesContent":["//import { fetchDogs } from \"../actions/actions\";\r\n\r\nconst initialState = {\r\n  dogs: [],\r\n  temperaments: [],\r\n  origin: [],\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"fetchDogs\":\r\n      return {\r\n        ...state,\r\n        dogs: action.payload,\r\n        origin: action.payload,\r\n      };\r\n    case \"createDog\":\r\n      return {\r\n        ...state, //copio lo que ya tengo en el array le concateno el nuevo obj\r\n        dogs: state.dogs.concat(action.payload), //[{},{}] --> [{},{},{}]\r\n      };\r\n    case \"getTemperaments\":\r\n      return {\r\n        ...state,\r\n        temperaments: action.payload,\r\n      };\r\n\r\n    case \"orderByName\":\r\n      const sortArr =\r\n        action.payload === \"asc\"\r\n          ? [...state.origin].sort((a, b) => {\r\n              if (a.name < b.name) return -1;\r\n              if (a.name > b.name) return 1;\r\n              return 0;\r\n            })\r\n          : [...state.origin].sort((a, b) => {\r\n              if (a.name > b.name) return -1;\r\n              if (a.name < b.name) return 1;\r\n              return 0;\r\n            });\r\n\r\n      return {\r\n        ...state,\r\n        dogs: sortArr,\r\n      };\r\n\r\n    case \"orderByWeight\":\r\n      const sortArr2 =\r\n        action.payload === \"wmin\"\r\n          ? [...state.origin].sort((a, b) => {\r\n              if (a.weight_min < b.weight_min) return -1;\r\n              if (a.weight_min > b.weight_min) return 1;\r\n              return 0;\r\n            })\r\n          : [...state.origin].sort((a, b) => {\r\n              if (a.weight_max > b.weight_max) return -1;\r\n              if (a.weight_max < b.weight_max) return 1;\r\n              return 0;\r\n            });\r\n\r\n      return {\r\n        ...state,\r\n        dogs: sortArr2,\r\n      };\r\n\r\n    case \"orderByOrigin\":\r\n      let originFilter = state.origin;\r\n\r\n      const createdDogs =\r\n        action.payload === \"Dogs_from_DB\"\r\n          ? originFilter.filter((e) => e.createInDb)\r\n          : originFilter.filter((e) => !e.createInDb);\r\n      //console.log('yuyu',createdDogs)\r\n      return {\r\n        ...state,\r\n        dogs: createdDogs,\r\n      };\r\n      \r\n    case \"filterByTemperament\":\r\n      let temperamentFilter = state.origin;\r\n\r\n      // const t = temperamentFilter.filter((e) =>\r\n      //   e.temperament !== null ? e.temperament.includes(action.payload) : \"\"\r\n      // );\r\n      let arry = [];\r\n      const t = temperamentFilter.filter(dog => {\r\n        // if(dog.temperament){ // info viene como [{name:..},{name:..},{name:..}]\r\n        //     const temperament = dog.temperament.map( dog => dog)\r\n        //     return temperament.includes(action.payload)}\r\n        if (dog.temperament) { //info viene como string\r\n           if(dog.temperament.includes(action.payload)){\r\n            [...arry];\r\n            arry.push(dog)\r\n            return dog.temperament.includes(action.payload)\r\n           }\r\n          \r\n        }\r\n       \r\n    })\r\n      //console.log('yuyu',t)\r\n      console.log(arry)\r\n      return {\r\n        ...state,\r\n        dogs: arry,\r\n      };\r\n/* const allDoguies = state.dogs\r\n            const t = temperamentFilter.filter(dog => {\r\n                if(dog.temperament){ // info viene como [{name:..},{name:..},{name:..}]\r\n                    const temperament = dog.temperaments.map( dog => dog)\r\n                    return temperament.includes(action.payload)}\r\n                if (dog.temperament) { //info viene como string\r\n                    return dog.temperament.includes(action.payload)\r\n                }\r\n                return null\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                dogs: action.payload === 'sinFiltro' ? allDoguies : tempDogs,\r\n\r\n            } */\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}